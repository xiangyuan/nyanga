'\" t
.\"     Title: zsys
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/16/2013
.\"    Manual: CZMQ Manual
.\"    Source: CZMQ 2.0.2
.\"  Language: English
.\"
.TH "ZSYS" "3" "11/16/2013" "CZMQ 2\&.0\&.2" "CZMQ Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zsys \- system\-level methods
.SH "SYNOPSIS"
.sp
.nf
//  Callback for interrupt signal handler
typedef void (zsys_handler_fn) (int signal_value);

//  Set interrupt handler (NULL means external handler)
CZMQ_EXPORT void
    zsys_handler_set (zsys_handler_fn *handler_fn);

//  Reset interrupt handler, call this at exit if needed
CZMQ_EXPORT void
    zsys_handler_reset (void);

//  Set network interface name to use for broadcasts
//  Use this to force the interface for beacons
//  This is experimental; may be merged into zbeacon class\&.
CZMQ_EXPORT void
    zsys_set_interface (char *iinterface);

//  Return network interface name to use for broadcasts\&.
//  Returns "" if no interface was set\&.
//  This is experimental; may be merged into zbeacon class\&.
CZMQ_EXPORT char *
    zsys_interface (void);

//  Return 1 if file exists, else zero
CZMQ_EXPORT bool
    zsys_file_exists (const char *filename);

//  Return size of file, or \-1 if not found
CZMQ_EXPORT ssize_t
    zsys_file_size (const char *filename);

//  Return file modification time\&. Returns 0 if the file does not exist\&.
CZMQ_EXPORT time_t
    zsys_file_modified (const char *filename);

//  Return file mode
CZMQ_EXPORT mode_t
    zsys_file_mode (const char *filename);

//  Delete file\&. Does not complain if the file is absent
CZMQ_EXPORT int
    zsys_file_delete (const char *filename);

//  Check if file is \*(Aqstable\*(Aq
CZMQ_EXPORT bool
    zsys_file_stable (const char *filename);

//  Create a file path if it doesn\*(Aqt exist\&. The file path is treated as a
//  printf format\&.
CZMQ_EXPORT int
    zsys_dir_create (const char *pathname, \&.\&.\&.);

//  Remove a file path if empty; the pathname is treated as printf format\&.
CZMQ_EXPORT int
    zsys_dir_delete (const char *pathname, \&.\&.\&.);

//  Set private file creation mode; all files created from here will be
//  readable/writable by the owner only\&.
CZMQ_EXPORT void
    zsys_file_mode_private (void);

//  Reset default file creation mode; all files created from here will use
//  process file mode defaults\&.
CZMQ_EXPORT void
    zsys_file_mode_default (void);

//  Format a string with variable arguments, returning a freshly allocated
//  buffer\&. If there was insufficient memory, returns NULL\&.
CZMQ_EXPORT char *
    zsys_vprintf (const char *format, va_list argptr);

//  Self test of this class
CZMQ_EXPORT int
    zsys_test (bool verbose);
.fi
.SH "DESCRIPTION"
.sp
The zsys class provides a portable wrapper for miscellaneous functions that we want to wrap but which don\(cqt fit into any of the existing classes\&. Eventually all non\-portable functionality might be moved here but for now it covers only file systems\&.
.SH "EXAMPLE"
.PP
\fBFrom zsys_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
    zsys_handler_reset ();
    zsys_handler_set (NULL);
    zsys_handler_set (NULL);
    zsys_handler_reset ();
    zsys_handler_reset ();

    int rc = zsys_file_delete ("nosuchfile");
    assert (rc == \-1);

    bool rc_bool = zsys_file_exists ("nosuchfile");
    assert (rc_bool != true);

    rc = (int) zsys_file_size ("nosuchfile");
    assert (rc == \-1);

    time_t when = zsys_file_modified ("\&.");
    assert (when > 0);

    rc = zsys_dir_create ("%s/%s", "\&.", "\&.testsys/subdir");
    assert (rc == 0);
    when = zsys_file_modified ("\&./\&.testsys/subdir");
    assert (when > 0);
    rc = zsys_dir_delete ("%s/%s", "\&.", "\&.testsys/subdir");
    assert (rc == 0);

    char *string = s_vprintf ("%s %02x", "Hello", 16);
    assert (streq (string, "Hello 10"));
    free (string);
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBczmq\fR(7)
.SH "AUTHORS"
.sp
The CZMQ manual was written by Pieter Hintjens<\m[blue]\fBph@imatix\&.com\fR\m[]\&\s-2\u[1]\d\s+2>\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fBhttp://czmq\&.zeromq\&.org/\fR\m[]
.sp
Report bugs to the 0MQ development mailing list: <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 1991\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\m[blue]\fBhttp://gnu\&.org/licenses/lgpl\&.html\fR\m[]>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the CZMQ distribution\&.
.SH "NOTES"
.IP " 1." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 2." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
