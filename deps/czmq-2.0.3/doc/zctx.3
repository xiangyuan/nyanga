'\" t
.\"     Title: zctx
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/16/2013
.\"    Manual: CZMQ Manual
.\"    Source: CZMQ 2.0.2
.\"  Language: English
.\"
.TH "ZCTX" "3" "11/16/2013" "CZMQ 2\&.0\&.2" "CZMQ Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
zctx \- working with 0MQ contexts
.SH "SYNOPSIS"
.sp
.nf
//  Create new context, returns context object, replaces zmq_init
CZMQ_EXPORT zctx_t *
    zctx_new (void);

//  Destroy context and all sockets in it, replaces zmq_term
CZMQ_EXPORT void
    zctx_destroy (zctx_t **self_p);

//  Raise default I/O threads from 1, for crazy heavy applications
//  The rule of thumb is one I/O thread per gigabyte of traffic in
//  or out\&. Call this method before creating any sockets on the context
//  or the setting will have no effect\&.
CZMQ_EXPORT void
    zctx_set_iothreads (zctx_t *self, int iothreads);

//  Set msecs to flush sockets when closing them, see the ZMQ_LINGER
//  man page section for more details\&. By default, set to zero, so
//  any in\-transit messages are discarded when you destroy a socket or
//  a context\&.
CZMQ_EXPORT void
    zctx_set_linger (zctx_t *self, int linger);

//  Set initial high\-water mark for inter\-thread pipe sockets\&. Note that
//  this setting is separate from the default for normal sockets\&. You
//  should change the default for pipe sockets *with care*\&. Too low values
//  will cause blocked threads, and an infinite setting can cause memory
//  exhaustion\&. The default, no matter the underlying ZeroMQ version, is
//  1,000\&.
CZMQ_EXPORT void
    zctx_set_pipehwm (zctx_t *self, int pipehwm);

//  Set initial send HWM for all new normal sockets created in context\&.
//  You can set this per\-socket after the socket is created\&.
//  The default, no matter the underlying ZeroMQ version, is 1,000\&.
CZMQ_EXPORT void
    zctx_set_sndhwm (zctx_t *self, int sndhwm);

//  Set initial receive HWM for all new normal sockets created in context\&.
//  You can set this per\-socket after the socket is created\&.
//  The default, no matter the underlying ZeroMQ version, is 1,000\&.
CZMQ_EXPORT void
    zctx_set_rcvhwm (zctx_t *self, int rcvhwm);

//  Return low\-level 0MQ context object, will be NULL before first socket
//  is created\&. Use with care\&.
CZMQ_EXPORT void *
    zctx_underlying (zctx_t *self);

//  Self test of this class
CZMQ_EXPORT int
    zctx_test (bool verbose);

//  Global signal indicator, TRUE when user presses Ctrl\-C or the process
//  gets a SIGTERM signal\&.
CZMQ_EXPORT extern volatile int zctx_interrupted;
.fi
.SH "DESCRIPTION"
.sp
The zctx class wraps 0MQ contexts\&. It manages open sockets in the context and automatically closes these before terminating the context\&. It provides a simple way to set the linger timeout on sockets, and configure contexts for number of I/O threads\&. Sets\-up signal (interrupt) handling for the process\&.
.sp
The zctx class has these main features:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tracks all open sockets and automatically closes them before calling zmq_term()\&. This avoids an infinite wait on open sockets\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically configures sockets with a ZMQ_LINGER timeout you can define, and which defaults to zero\&. The default behavior of zctx is therefore like 0MQ/2\&.0, immediate termination with loss of any pending messages\&. You can set any linger timeout you like by calling the zctx_set_linger() method\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Moves the iothreads configuration to a separate method, so that default usage is 1 I/O thread\&. Lets you configure this value\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Sets up signal (SIGINT and SIGTERM) handling so that blocking calls such as zmq_recv() and zmq_poll() will return when the user presses Ctrl\-C\&.
.RE
.SH "EXAMPLE"
.PP
\fBFrom zctx_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
    //  Create and destroy a context without using it
    zctx_t *ctx = zctx_new ();
    assert (ctx);
    zctx_destroy (&ctx);
    assert (ctx == NULL);

    //  Create a context with many busy sockets, destroy it
    ctx = zctx_new ();
    assert (ctx);
    zctx_set_iothreads (ctx, 1);
    zctx_set_linger (ctx, 5);       //  5 msecs
    void *s1 = zctx__socket_new (ctx, ZMQ_PAIR);
    void *s2 = zctx__socket_new (ctx, ZMQ_XREQ);
    void *s3 = zctx__socket_new (ctx, ZMQ_REQ);
    void *s4 = zctx__socket_new (ctx, ZMQ_REP);
    void *s5 = zctx__socket_new (ctx, ZMQ_PUB);
    void *s6 = zctx__socket_new (ctx, ZMQ_SUB);
    zsocket_connect (s1, "tcp://127\&.0\&.0\&.1:5555");
    zsocket_connect (s2, "tcp://127\&.0\&.0\&.1:5555");
    zsocket_connect (s3, "tcp://127\&.0\&.0\&.1:5555");
    zsocket_connect (s4, "tcp://127\&.0\&.0\&.1:5555");
    zsocket_connect (s5, "tcp://127\&.0\&.0\&.1:5555");
    zsocket_connect (s6, "tcp://127\&.0\&.0\&.1:5555");
    assert (zctx_underlying (ctx));
    zctx_destroy (&ctx);
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBczmq\fR(7)
.SH "AUTHORS"
.sp
The CZMQ manual was written by Pieter Hintjens<\m[blue]\fBph@imatix\&.com\fR\m[]\&\s-2\u[1]\d\s+2>\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fBhttp://czmq\&.zeromq\&.org/\fR\m[]
.sp
Report bugs to the 0MQ development mailing list: <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[2]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) 1991\-2010 iMatix Corporation and contributors\&. License LGPLv3+: GNU LGPL 3 or later <\m[blue]\fBhttp://gnu\&.org/licenses/lgpl\&.html\fR\m[]>\&. This is free software: you are free to change it and redistribute it\&. There is NO WARRANTY, to the extent permitted by law\&. For details see the files COPYING and COPYING\&.LESSER included with the CZMQ distribution\&.
.SH "NOTES"
.IP " 1." 4
ph@imatix.com
.RS 4
\%mailto:ph@imatix.com
.RE
.IP " 2." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
